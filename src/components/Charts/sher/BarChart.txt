// import * as d3 from 'd3';
// import React from 'react';
// const width = 650;
// const height = 400;
// const tickFormat = d3.timeFormat('%b');
// const margin = { top: 20, right: 5, bottom: 20, left: 35 };

// class BarChart extends React.Component {
//   public xAxis = d3.axisBottom(d3.scaleTime()); // .tickFormat(tickFormat);
//   public yAxis = d3.axisLeft(d3.scaleLinear()).tickFormat(d => `${d}â„‰`);
//   public constructor(props: any) {
//     super(props);
//     this.state = {
//       bars: []
//     };
//   }

//   public getDerivedStateFromProps(nextProps: any, prevState: any) {
//     const { data } = nextProps;
//     if (!data) return {};
//     // 1. map date to x-position
//     // get min and max of date
//     const extent: any = d3.extent(data, (d: any) => d.date);
//     if (extent && extent !== undefined) {
//       const xScale = d3
//         .scaleTime()
//         .domain(extent)
//         .range([margin.left, width - margin.right]);
//     }

//     // 2. map high temp to y-position
//     // get min/max of high temp
//     const [min, max] = d3.extent(data, (d:any) => d.high);
//     const yScale = d3
//       .scaleLinear()
//       .domain([Math.min( Number(min), 0), Number(max)])
//       .range([height - margin.bottom, margin.top]);

//     // 3. map avg temp to color
//     // get min/max of avg
//     const colorExtent = d3.extent(data, (d:any) => d.avg).reverse();
//     let cons = d3.scaleSequential((t:number)=>{ return});
//     const colorScale:any = cons
//       .domain(colorExtent)
//       .interpolator(d3.interpolateRdYlBu);

//     // array of objects: x, y, height // shall we convert the hell out for the
//     // panu da panu panu  scrape in the trand null pointer exception in the

//     const bars = data.map(d => {
//       return {
//         x: xScale(d.date),
//         y: yScale(d.high),
//         height: yScale(d.low) - yScale(d.high),
//         fill: colorScale(d.avg)
//       };
//     });

//     return { bars, xScale, yScale };
//   }

//   componentDidUpdate() {
//     this.xAxis.scale(this.state.xScale);
//     d3.select(this.refs.xAxis).call(this.xAxis);
//     this.yAxis.scale(this.state.yScale);
//     d3.select(this.refs.yAxis).call(this.yAxis);
//   }

//   render() {
//     return (
//       <svg width={width} height={height}>
//         {this.state.bars.map(d => (
//           <rect x={d.x} y={d.y} width={2} height={d.height} fill={d.fill} />
//         ))}
//         <g ref="xAxis" transform={`translate(0, ${height - margin.bottom})`} />
//         <g ref="yAxis" transform={`translate(${margin.left}, 0)`} />
//       </svg>
//     );
//   }
// }

// export default BarChart;
