// THIS FILE IS AUTO-GENERATED TEST. DO NOT EDIT
package ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model;

import ai.verta.common.KeyValue;
import ai.verta.common.ValueTypeEnum.ValueType;
import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.*;
import ai.verta.modeldb.versioning.blob.diff.*;
import ai.verta.modeldb.versioning.blob.diff.Function3;
import ai.verta.modeldb.versioning.blob.visitors.Visitor;
import com.pholser.junit.quickcheck.generator.*;
import com.pholser.junit.quickcheck.random.*;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.*;
import java.util.function.Function;
import org.apache.commons.codec.binary.Hex;

public class AutogenCommonKeyValue implements ProtoType {
  private String Key;
  private com.google.protobuf.Value Value;
  private ValueType ValueType;

  public AutogenCommonKeyValue() {
    this.Key = "";
    this.Value = null;
    this.ValueType = null;
  }

  public Boolean isEmpty() {
    if (this.Key != null && !this.Key.equals("")) {
      return false;
    }
    if (this.Value != null && !this.Value.equals(null)) {
      return false;
    }
    if (this.ValueType != null && !this.ValueType.equals(null)) {
      return false;
    }
    return true;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("{\"class\": \"AutogenCommonKeyValue\", \"fields\": {");
    boolean first = true;
    if (this.Key != null && !this.Key.equals("")) {
      if (!first) sb.append(", ");
      sb.append("\"Key\": " + "\"" + Key + "\"");
      first = false;
    }
    if (this.Value != null && !this.Value.equals(null)) {
      if (!first) sb.append(", ");
      sb.append("\"Value\": " + Value);
      first = false;
    }
    if (this.ValueType != null && !this.ValueType.equals(null)) {
      if (!first) sb.append(", ");
      sb.append("\"ValueType\": " + ValueType);
      first = false;
    }
    sb.append("}}");
    return sb.toString();
  }

  // TODO: actually hash
  public String getSHA() throws NoSuchAlgorithmException {
    MessageDigest digest = MessageDigest.getInstance("SHA-256");
    byte[] hash = digest.digest(this.toString().getBytes(StandardCharsets.UTF_8));
    return new String(new Hex().encode(hash));
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.toString());
  }

  // TODO: not consider order on lists
  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null) return false;
    if (!(o instanceof AutogenCommonKeyValue)) return false;
    AutogenCommonKeyValue other = (AutogenCommonKeyValue) o;

    {
      Function3<String, String, Boolean> f = (x, y) -> x.equals(y);
      if (this.Key != null || other.Key != null) {
        if (this.Key == null && other.Key != null) return false;
        if (this.Key != null && other.Key == null) return false;
        if (!f.apply(this.Key, other.Key)) return false;
      }
    }
    {
      Function3<com.google.protobuf.Value, com.google.protobuf.Value, Boolean> f =
          (x, y) -> x.equals(y);
      if (this.Value != null || other.Value != null) {
        if (this.Value == null && other.Value != null) return false;
        if (this.Value != null && other.Value == null) return false;
        if (!f.apply(this.Value, other.Value)) return false;
      }
    }
    {
      Function3<ValueType, ValueType, Boolean> f = (x, y) -> x.equals(y);
      if (this.ValueType != null || other.ValueType != null) {
        if (this.ValueType == null && other.ValueType != null) return false;
        if (this.ValueType != null && other.ValueType == null) return false;
        if (!f.apply(this.ValueType, other.ValueType)) return false;
      }
    }
    return true;
  }

  public AutogenCommonKeyValue setKey(String value) {
    this.Key = Utils.removeEmpty(value);
    return this;
  }

  public String getKey() {
    return this.Key;
  }

  public AutogenCommonKeyValue setValue(com.google.protobuf.Value value) {
    this.Value = Utils.removeEmpty(value);
    return this;
  }

  public com.google.protobuf.Value getValue() {
    return this.Value;
  }

  public AutogenCommonKeyValue setValueType(ValueType value) {
    this.ValueType = Utils.removeEmpty(value);
    return this;
  }

  public ValueType getValueType() {
    return this.ValueType;
  }

  public static AutogenCommonKeyValue fromProto(KeyValue blob) {
    if (blob == null) {
      return null;
    }

    AutogenCommonKeyValue obj = new AutogenCommonKeyValue();
    {
      Function<KeyValue, String> f = x -> (blob.getKey());
      obj.setKey(f.apply(blob));
    }
    {
      Function<KeyValue, com.google.protobuf.Value> f = x -> (blob.getValue());
      obj.setValue(f.apply(blob));
    }
    {
      Function<KeyValue, ValueType> f = x -> blob.getValueType();
      obj.setValueType(f.apply(blob));
    }
    return obj;
  }

  public KeyValue.Builder toProto() {
    KeyValue.Builder builder = KeyValue.newBuilder();
    {
      if (this.Key != null && !this.Key.equals("")) {
        Function<KeyValue.Builder, Void> f =
            x -> {
              builder.setKey(this.Key);
              return null;
            };
        f.apply(builder);
      }
    }
    {
      if (this.Value != null && !this.Value.equals(null)) {
        Function<KeyValue.Builder, Void> f =
            x -> {
              builder.setValue(this.Value);
              return null;
            };
        f.apply(builder);
      }
    }
    {
      if (this.ValueType != null && !this.ValueType.equals(null)) {
        Function<KeyValue.Builder, Void> f =
            x -> {
              builder.setValueType(this.ValueType);
              return null;
            };
        f.apply(builder);
      }
    }
    return builder;
  }

  public void preVisitShallow(Visitor visitor) throws ModelDBException {
    throw new ModelDBException("Not Implemented Yet");
  }

  public void preVisitDeep(Visitor visitor) throws ModelDBException {
    throw new ModelDBException("Not Implemented Yet");
  }

  public AutogenCommonKeyValue postVisitShallow(Visitor visitor) throws ModelDBException {
    throw new ModelDBException("Not Implemented Yet");
  }

  public AutogenCommonKeyValue postVisitDeep(Visitor visitor) throws ModelDBException {
    throw new ModelDBException("Not Implemented Yet");
  }
}
